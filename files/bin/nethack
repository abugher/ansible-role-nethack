#!/bin/bash
                 nethack='/usr/local/games/nethack'
                 version=$(head -n 2 $nethack | tail -n 1 | awk '{print $3}')
         local_bones_dir='/usr/local/games/lib/nethackdir'
          bones_registry="${local_bones_dir}/.bones_registry.${USER}.txt"
        remote_bones_dir="/tmp/bones"
             version_dir="${remote_bones_dir}/${version}"
        remote_bones_url="cryptkeeper@neuronpointer.net:bones"
                lock_dir=".lock_dir"
                 uidfile="/tmp/nethack_bones_uidfile.${USER}"
                 gidfile="/tmp/nethack_bones_gidfile.${USER}"
              remote_uid='995'
              remote_gid='992'
             bones_files=()
            lock_timeout=10
             upload_pass=0


function puke {
  ret=$1
  shift
  echo "BLEAH:  ${@}"
  exit $ret
}


mount_remote_bones_dir () {
  echo "${USER}:${remote_uid}" > $uidfile
  echo "games:${remote_gid}" > $gidfile
  mkdir -p $remote_bones_dir || puke $? "Failed to mkdir:  ${remote_bones_dir}"
  if ! mountpoint $remote_bones_dir > /dev/null; then
    chown :games /tmp/bones || puke $? "Failed to create mount point for remote shared bones."
    sshfs \
      -o idmap=file,uidfile=$uidfile,gidfile=$gidfile,allow_other,reconnect \
      $remote_bones_url $remote_bones_dir || puke $? "Failed to mount:  ${remote_bones_dir}"
  fi
}


lock() {
  file_lock_dir="${1}"
  i=0
  while ! test -f $file_lock_dir/pid.$$; do
    while ! mkdir $file_lock_dir > /dev/null 2>&1; do
      if rmdir $file_lock_dir > /dev/null 2>&1; then
        continue
      fi
      if test $i -ge $lock_timeout; then
        puke $? "Failed to acquire lock:  $file_lock_dir"
      fi
      for pid_file in $file_lock_dir/pid.*; do
        pid=$(sed 's/.*\.//g' <<< $pid_file)
        if test '*' == "${pid}"; then
          continue
        fi
        read user < $pid_file
        echo "Lock held by ${user} for PID:  ${pid}"
      done
      sleep 1
      i=$((i+1))
    done

    echo $USER@$HOSTNAME > $file_lock_dir/pid.$$
  done
}


lock_dir() {
  dir="${1}"
  lock "${dir}/${lock_dir}"
  #echo "Locked:  ${dir}"
}


unlock_dir() {
  dir="${1}"
  rm $dir/$lock_dir/pid.$$ || puke $? "Failed to remove PID file."
  rmdir $dir/$lock_dir || puke $? "Failed to remove lock file."
  #echo "Unlocked:  ${dir}"
}


lock_file() {
  file="${1}"
  file_lock_dir=$(sed -E 's/\/([^\/]*)$/\/.lock.\1/' <<< $file)
  lock $file_lock_dir
  #echo "Locked:  $file"
}


unlock_file() {
  file="${1}"
  file_lock_dir=$(sed -E 's/\/([^\/]*)$/\/.lock.\1/' <<< $file)
  rm $file_lock_dir/pid.$$ || puke $? "Failed to remove PID file."
  rmdir $file_lock_dir || puke $? "Failed to remove lock file."
  #echo "Unlocked:  ${file}"
}


file_is_locked() {
  file="${1}"
  file_lock_dir=$(sed -E 's/\/([^\/]*)$/\/.lock.\1/' <<< $file)
  test -d $file_lock_dir
}


release_bones_files() {
  for bones_file in "${bones_files[@]}"; do
    unlock_file $local_bones_dir/$bones_file
  done
}


upload_bones_files() {
  upload_pass=$(( upload_pass + 1 ))
  touch $bones_registry || puke $? "Failed to touch bones registry:  ${bones_registry}"
  lock_dir $version_dir
  mkdir -p "${version_dir}" || puke $? "Failed to create shared bones directory:  ${version_dir}"
  oldpwd=$PWD
  cd $version_dir/
  for bones_file in "${bones_files[@]}"; do
    if ! file_is_locked $local_bones_dir/$bones_file; then
      if test -e $local_bones_dir/$bones_file; then
        mv $local_bones_dir/$bones_file $version_dir/$bones_file || puke $? "Failed to move:  ${bones_file}"
      else
        lock_file $bones_registry
        grep -v "^${bones_file}\$" $bones_registry "${bones_registry}.tmp" || puke $? "Failed to create temporary file:  ${bones_registry}.tmp"
        mv $bones_registry.tmp $bones_registry || puke $? "Failed to overwrite bones registry."
        unlock_file $bones_registry
      fi
      echo "        Uploaded: $(stat -c %y ${bones_file}) - ${bones_file}" 
    else
      echo "Skipped (locked):  ${bones_file}"
    fi
  done
  for bones_file in $(ls $local_bones_dir | grep '^bon'); do
    bones_file=$(echo $bones_file | sed 's/.*\///g')
    if ! file_is_locked $local_bones_dir/$bones_file; then
      mv $local_bones_dir/$bones_file $version_dir/$bones_file || puke $? "Failed to move:  ${bones_file}"
      if test $upload_pass -gt 1; then
        echo "             New: $(stat -c %y ${bones_file}) - ${bones_file}" 
        lock_file $bones_registry
        echo "${bones_file}" >> $bones_registry
        unlock_file $bones_registry
      else
        echo "        Salvaged: $(stat -c %y ${bones_file}) - ${bones_file}" 
      fi
    else
      echo "Skipped (locked):  ${bones_file}"
    fi
  done
  unlock_dir $version_dir
}


download_bones_files() {
  lock_dir $version_dir
  available_count=$(ls $version_dir | grep ^bon | wc -l)
  download_quota=$(( $available_count / 2 ))
  if test 1 -eq $available_count; then
    download_quota=1
  fi

  oldpwd=$PWD
  cd $local_bones_dir/
  download_count=0
  for bones_file in $(ls $version_dir | grep ^bon | sort -R); do
    if test $download_count -ge $download_quota; then 
      break
    fi
    if 
      ! test -z "${NETHACK_SKIP_SELF_BONES:+isset}" \
      && grep -q "^${bones_file}\$" $bones_registry
    then 
      continue
    fi
    bones_files+=( $bones_file )
    lock_file $local_bones_dir/$bones_file
    mv $version_dir/$bones_file $local_bones_dir/$bones_file || puke $? "failed to move ${bones_file}"
    echo "      Downloaded: $(stat -c %y ${bones_file}) - ${bones_file}"
    let download_count++
  done
  cd -
  unlock_dir $version_dir
}


play() {
  echo "Starting nethack."
  $nethack

  echo "nethack returned:  $?"
}


mount_remote_bones_dir
lock_dir $remote_bones_dir
upload_bones_files
download_bones_files
unlock_dir $remote_bones_dir
play
release_bones_files
mount_remote_bones_dir
lock_dir $remote_bones_dir
upload_bones_files
unlock_dir $remote_bones_dir
