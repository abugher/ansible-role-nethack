#!/bin/bash

export NETHACKOPTIONS="@${HOME}/.nethackrc"

nethack='/usr/local/games/nethack'
version=$(head -n 2 $nethack | tail -n 1 | awk '{print $3}')
nethackdir='/usr/local/games/lib/nethackdir'
# Registries exist to identify "self" bones, in case we want to skip those.
bones_registries=()
for bones_registry in "${nethackdir}"/.bones_registry.*; do
  bones_registries+=( "${bones_registry}" )
done
bones_registry="${nethackdir}/.bones_registry.${USER}"
remote_bones_dir="/tmp/bones"
version_dir="${remote_bones_dir}/${version}"
remote_bones_url="cryptkeeper@neuron.neuronpointer.net:bones"
lock_dir=".lock_dir"
remote_uid='995'
remote_gid='992'
checked_out_bones_files=()
lock_timeout=10
locks=()
puke_recursion_count=0
self_short_name="$(sed 's/^.*\///g' <<< "${0}")"


puke() {
  puke_recursion_count=$(( puke_recursion_count + 1 ))
  ret=$1
  shift
  if test 1 -eq $puke_recursion_count; then
    echo "BLEAH:  ${@}"
    for lock in "${locks[@]}"; do
      unlock $lock
    done
  else
    echo "DOUBLE BLEAH:  ${@}"
  fi
  exit $ret
}


mount_remote_bones_dir() {
  mkdir -p $remote_bones_dir || puke $? "Failed to mkdir:  ${remote_bones_dir}"
  if ! mountpoint $remote_bones_dir > /dev/null; then
#    chown :games $remote_bones_dir || puke $? "Failed to set group ownership on mount point for remote shared bones."
    sshfs \
      -o allow_other,reconnect \
      $remote_bones_url $remote_bones_dir || puke $? "Failed to mount:  ${remote_bones_dir}"
  fi
}


unmount_remote_bones_dir() {
  fusermount -u $remote_bones_dir || puke $? "Failed to unmount remote shared bones."
  rmdir $remote_bones_dir || puke $? "Failed to remove mount point for remote shared bones."
}


lock() {
  kick_lock "${1}"
  file_lock_dir="${1}"
  i=0
  while ! test -f $file_lock_dir/pid.$$; do
    while ! mkdir $file_lock_dir > /dev/null 2>&1; do
      if rmdir $file_lock_dir > /dev/null 2>&1; then
        continue
      fi
      if test $i -ge $lock_timeout; then
        puke $? "Failed to acquire lock:  $file_lock_dir"
      fi
      sleep 1
      i=$((i+1))
    done
    echo "${USER}@${HOSTNAME}" > $file_lock_dir/pid.$$
  done
  locks+=( $file_lock_dir )
}


kick_lock() {
  file_lock_dir="${1}"
  for pid_file in ${file_lock_dir}/pid.*; do
    pid="$(sed 's/.*\.//g' <<< $pid_file)"
    if test '*' == "${pid}"; then
      continue
    fi
    read user host <<< $(sed 's/@/ /' $pid_file)
    echo "Lock held by ${user} on ${host} for process ${pid} in lock file:  ${file_lock_dir}"
    if test "${HOSTNAME}" = "${host}"; then
      if ! ps -p "${pid}" >/dev/null 2>&1; then
        rm "${pid_file}"
      fi
    fi
  done
  rmdir "${file_lock_dir}" > /dev/null 2>&1
}


lock_dir() {
  dir="${1}"
  lock "${dir}/${lock_dir}"
}


kick_lock_dir() {
  dir="${1}"
  kick_lock "${dir}/${lock_dir}"
}


unlock() {
  file_lock_dir="${1}"
  rm "${file_lock_dir}/pid.${$}" || puke $? "Failed to remove PID file:  ${file_lock_dir}/pid.${$}"
  rmdir "${file_lock_dir}" || puke $? "Failed to remove lock dir:  ${file_lock_dir}"
  locks_backup=("${locks[@]}")
  locks=()
  for lock in "${locks_backup[@]}"; do
    if ! test "${file_lock_dir}" == "${lock}"; then
      locks+=( $lock )
    fi
  done
}


unlock_dir() {
  dir="${1}"
  unlock "${dir}/${lock_dir}"
}


lock_file() {
  file="${1}"
  file_lock_dir=$(sed -E 's/\/([^\/]*)$/\/.lock.\1/' <<< $file)
  lock $file_lock_dir
}


kick_lock_file() {
  file="${1}"
  file_lock_dir=$(sed -E 's/\/([^\/]*)$/\/.lock.\1/' <<< $file)
  kick_lock $file_lock_dir
}


unlock_file() {
  file="${1}"
  unlock $(sed -E 's/\/([^\/]*)$/\/.lock.\1/' <<< $file)
}


file_is_locked() {
  file="${1}"
  file_lock_dir=$(sed -E 's/\/([^\/]*)$/\/.lock.\1/' <<< $file)
  test -d $file_lock_dir
}


unlock_local_bones_files() {
  for bones_file in "${checked_out_bones_files[@]}"; do
    unlock_file $nethackdir/$bones_file
  done
}


register() {
  bones_entry="${1}"
  if ! grep -q "${bones_entry}" "${bones_registries[@]}"; then
    lock_file $bones_registry
    echo "${bones_entry}" >> $bones_registry || puke $? "Failed to register bones (${bones_entry}) in:  ${bones_registry}"
    unlock_file $bones_registry
  fi
}


unregister() {
  bones_entry="${1}"
  lock_file $bones_registry
  > "${bones_registry}.tmp" || puke $? "Failed to create/blank temporary file:  ${bones_registry}.tmp"
  touch $bones_registry || puke $? "Failed to touch:  ${bones_registry}"
  # Don't fail if grep fails.  The bones registry may be empty.
  grep -v "^${bones_entry}\$" $bones_registry > "${bones_registry}.tmp"
  mv $bones_registry.tmp $bones_registry || puke $? "Failed to overwrite bones registry."
  unlock_file $bones_registry
}


report_consumed_bones_files() {
  for bones_file in "${checked_out_bones_files[@]}"; do
    if ! test -e $nethackdir/$bones_file; then
      bones_entry=$(bones_entry "${nethackdir}" "${bones_file}")
      echo "       Consumed:  ${bones_entry}"
      unregister "${bones_entry}"
    fi
  done
}


bones_entry() {
  dir="${1}"
  bones_entry="${2}"
  echo "$(stat -c %y "${dir}/${bones_file}" | sed 's/\.[0-9]*//') - ${bones_file}"
}


upload_bones_files() {
  mkdir -p "${version_dir}" || puke $? "Failed to create shared bones directory:  ${version_dir}"
  lock_dir $version_dir
  for bones_file in $(ls $nethackdir | grep '^bon'); do
    kick_lock_file "${nethackdir}/${bones_file}"
    bones_file=$(echo $bones_file | sed 's/.*\///g')
    bones_entry="$(bones_entry "${nethackdir}" "${bones_file}")"
    if file_is_locked $nethackdir/$bones_file; then
      echo "Skipped (locked):  ${bones_entry}"
      continue
    fi
    unset checked_out
    for checked_out_bones_file in "${checked_out_bones_files[@]}"; do
      if test "${checked_out_bones_file}" = "${bones_file}"; then
        checked_out=1
      fi
    done
    if test 'set' = "${post_game:+set}"; then
      if ! test 'set' = "${checked_out:+set}"; then
        register "${bones_entry}"
        echo "             New:  ${bones_entry}"
      else
        echo "        Uploaded:  ${bones_entry}"
      fi
    else
      echo "        Salvaged:  ${bones_entry}"
    fi
    if test -e $version_dir/$bones_file; then
      echo "   Skipped (dup):  ${bones_entry}"
      continue
    fi
    cp $nethackdir/$bones_file $version_dir/$bones_file || puke $? "Failed to upload:  ${bones_file}"
    rm $nethackdir/$bones_file || puke $? "Failed to delete locally after upload:  ${bones_file}"
  done
  unlock_dir $version_dir
}


download_bones_files() {
  lock_dir $version_dir
  available_count=$(ls $version_dir | grep ^bon | wc -l)
  download_quota=$(( $available_count / 2 ))
  if test 1 -eq $available_count; then
    download_quota=1
  fi

  oldpwd=$PWD
  cd $nethackdir/
  download_count=0
  for bones_file in $(ls $version_dir | grep ^bon | sort -R); do
    if test $download_count -ge $download_quota; then 
      break
    fi
    if 
      test 'set' = "${NETHACK_SKIP_SELF_BONES:+set}" \
      && grep -q " - ${bones_file}\$" $bones_registry
    then 
      continue
    fi
    if test -e $nethackdir/$bones_file; then
      continue
    fi
    checked_out_bones_files+=( $bones_file )
    # Eliminate precision past the second to avoid disagreements about how many
    # decimal places of precision are kept, and subsequent comparison errors.
    # How many bones files can you generate per second, anyway?
    bones_entry="$(bones_entry "${version_dir}" "${bones_file}")"
    lock_file $nethackdir/$bones_file
    cp $version_dir/$bones_file $nethackdir/$bones_file || puke $? "Failed to download:  ${bones_file}"
    rm $version_dir/$bones_file || puke $? "failed to delete locally after download:  ${bones_file}"
    echo "      Downloaded:  ${bones_entry}"
    let download_count++
  done
  cd "${oldpwd}"
  unlock_dir $version_dir
}


nethack_is_running() {
  grep "${nethackdir}/nethack" <<< $(ps -elf) | awk '{print $3}' | grep -q "^${USER}"'$'
}


play() {
  if nethack_is_running; then
    puke 1 "You're playing enough nethack for now."
  fi
  recover
  mount_remote_bones_dir
  lock_dir $remote_bones_dir
  upload_bones_files
  download_bones_files
  unlock_dir $remote_bones_dir
  unmount_remote_bones_dir
  if mesg >/dev/null; then mesg=y; else mesg=n; fi
  mesg n
  echo "Starting nethack."
  $nethack
  echo "nethack returned:  $?"
  mesg "${mesg}"
  unlock_local_bones_files
  mount_remote_bones_dir
  lock_dir $remote_bones_dir
  report_consumed_bones_files
  post_game=1 upload_bones_files
  unlock_dir $remote_bones_dir
  unmount_remote_bones_dir
}


recover() {
  if nethack_is_running; then
    puke 1 "Attempted to recover while a game is active."
  fi
  bases=(
    $(
      find "${nethackdir}" -user "${USER}" \
      | sed 's/^.*\///g' \
      | grep -v '^\.' \
      | grep lock \
      | sed 's/\..*$//' \
      | uniq
    )
  )
  if test 0 -lt "${#bases[@]}"; then
    echo "Recovering games - base names:"
    for base in "${bases[@]}"; do
      echo "  '${base}'"
    done
    "${nethackdir}"/recover -d "${nethackdir}" "${bases[@]}"
    echo "Recovery finished.  Results not checked."
  else
    echo "No games to recover."
  fi
  # What is this supposed to do?  There was actually no file at this location
  # when chown was attempted.  Recovery seemed to go fine, though.
  for base in "${bases[@]}"; do
    echo "Adjusting permissions for:  '${base}'"
    chown :games "${nethackdir}"/"${base}"
  done
}


case "${self_short_name}" in
  nethack)
    play
    ;;
  recover)
    recover
    ;;
  *)
    puke 1 "I don't know how to be '${self_short_name}'.  I'm more of a nethack kind of script."
esac
